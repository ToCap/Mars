/*
 ***************************************************************************************************
 * MARS - the open source AR platform for Mindstorm https://github.com/ToCap/Mars
 *
 * Copyright (C) 2020  GC-MS Software (ThomTheCat)
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 *  Software distributed under the License is distributed on an "AS IS"
 *  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 *  License for the specific language governing rights and limitations
 *  under the License.
 ***************************************************************************************************
*/

#ifndef BFX_NXC
#define BFX_NXC
/**
 * \defgroup Bfx
*/

/*
 ***************************************************************************************************
 * Includes
 ***************************************************************************************************
*/

#include "Bfx.h"						/**/




/*
 ***************************************************************************************************
 * Services
 ***************************************************************************************************
*/

/**
 * \ingroup Bfx
 * \brief	set the logical status of input data as '1' at the requested bit position
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to set
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00001, SWS_Bfx_00002, SWS_Bfx_00008
*/
void Bfx_SetBit_u8u8(P2VAR(uint8) Data, uint8 BitPn)	
{
	Data = ((Data | (0x01 << BitPn)) & 0xFF);
	/* HINTS : Additionnal mask is used to force computation output to targetted type */
}


/**
 * \ingroup Bfx
 * \brief	set the logical status of input data as '1' at the requested bit position
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to set
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00001, SWS_Bfx_00002, SWS_Bfx_00008
*/
void Bfx_SetBit_u16u8(P2VAR(uint16) Data, uint8 BitPn)
{
	Data = ((Data | (0x01 << BitPn)) & 0xFFFF);
	/* HINTS : Additionnal mask is used to force computation output to targetted type */
}


/**
 * \ingroup Bfx
 * \brief	set the logical status of input data as '1' at the requested bit position
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to set
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00001, SWS_Bfx_00002, SWS_Bfx_00008
*/
void Bfx_SetBit_u32u8(P2VAR(uint32) Data, uint8 BitPn)
{
	Data = (Data | (0x01 << BitPn));
}



/**
 * \ingroup Bfx
 * \brief	clear the logical status of the input data to '0' at the requested bit position
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to clear
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00010, SWS_Bfx_00011, SWS_Bfx_00015
*/
void Bfx_ClrBit_u8u8(P2VAR(uint8) Data, uint8 BitPn)
{
	Data = (Data & ~(0x01 << BitPn));
}


/**
 * \ingroup Bfx
 * \brief	clear the logical status of the input data to '0' at the requested bit position
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to clear
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00010, SWS_Bfx_00011, SWS_Bfx_00015
*/
void Bfx_ClrBit_u16u8(P2VAR(uint16) Data, uint8 BitPn)
{
	Data = (Data & ~(0x01 << BitPn));
}


/**
 * \ingroup Bfx
 * \brief	clear the logical status of the input data to '0' at the requested bit position
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to clear
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00010, SWS_Bfx_00011, SWS_Bfx_00015
*/
void Bfx_ClrBit_u32u8(P2VAR(uint32) Data, uint8 BitPn)
{
	Data = (Data & ~(0x01 << BitPn));
}



/**
 * \ingroup Bfx
 * \brief	return the logical status of the input data for the requested bit position
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to return
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00016, SWS_Bfx_00017, SWS_Bfx_00020
*/
boolean Bfx_GetBit_u8u8(uint8 Data, uint8 BitPn)
{
	return ((Data & (0x01 << BitPn)) != 0);
}



/**
 * \ingroup Bfx
 * \brief	return the logical status of the input data for the requested bit position
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to return
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00010, SWS_Bfx_00011, SWS_Bfx_00015
*/
boolean Bfx_GetBit_u16u8(uint16 Data, uint8 BitPn)
{
	return ((Data & (0x01 << BitPn)) != 0);
}


/**
 * \ingroup Bfx
 * \brief	return the logical status of the input data for the requested bit position
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to return
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00010, SWS_Bfx_00011, SWS_Bfx_00015
*/
boolean Bfx_GetBit_u32u8(uint32 Data, uint8 BitPn)
{
	return 	((Data & (0x01 << BitPn)) != 0);
}


/**
 * \ingroup Bfx
 * \brief	update the bit specified by BitPn of input data as per Status value
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to return
 * \param	Status
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00130, SWS_Bfx_00132
*/
void Bfx_PutBit_u8u8u8(P2VAR(uint8) Data, uint8 BitPn, boolean Status)
{
	if (Status)
	{
		Bfx_SetBit_u8u8(Data, BitPn);
	}
	else
	{
		Bfx_ClrBit_u8u8(Data, BitPn);
	}
}


/**
 * \ingroup Bfx
 * \brief	update the bit specified by BitPn of input data as per Status value
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to return
 * \param	Status
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00130, SWS_Bfx_00132
*/
void Bfx_PutBit_u16u8u8(P2VAR(uint16) Data, uint8 BitPn, boolean Status)
{
	if (Status)
	{
		Bfx_SetBit_u16u8(Data, BitPn);
	}
	else
	{
		Bfx_ClrBit_u16u8(Data, BitPn);
	}
}


/**
 * \ingroup Bfx
 * \brief	update the bit specified by BitPn of input data as per Status value
 * \param	Data	Pointer to where to store the version information of this module
 * \param	BitPn	Position of bit to return
 * \param	Status
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00130, SWS_Bfx_00132
*/
void Bfx_PutBit_u32u8u8(P2VAR(uint32) Data, uint8 BitPn, boolean Status)
{
	if (Status)
	{
		Bfx_SetBit_u32u8(Data, BitPn);
	}
	else
	{
		Bfx_ClrBit_u32u8(Data, BitPn);
	}
}


/**
 * \ingroup Bfx
 * \brief	Returns the version information of this module
 * \param[out] versioninfo Pointer to where to store the version information of this module
 * \return	None
 * \see	None
 * \par Autosar standard
 * SWS_Bfx_00301
*/
void Bfx_GetVersionInfo(P2VAR(Std_VersionInfoType) versioninfo)
{
	/* Copy module information */
	versioninfo.vendorID = BFX_VENDOR_ID;
	versioninfo.moduleID = BFX_MODULE_ID;
	
	/* Copy version information */
	versioninfo.sw_major_version = BFX_SW_MAJOR_VERSION;
	versioninfo.sw_minor_version = BFX_SW_MINOR_VERSION;
	versioninfo.sw_patch_version = BFX_SW_PATCH_VERSION;
}

#endif /*BFX_NXC*/
